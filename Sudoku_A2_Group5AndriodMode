int canvas_width  = 500;
int canvas_height = 900;
int grid_size     = 9;
int grid_top      = 125;
int grid_bottom   = 625;
int selectorH     = 50;

int cell_w, cell_h, cellSelectorW, selectorTop;
int[][] num        = new int[grid_size][grid_size];
int[][] solution   = new int[grid_size][grid_size];

int[] clicked_cell = null;
Integer selectedNumber = null;

void settings() {
  size(canvas_width, canvas_height);
}

void setup() {
  cell_w = canvas_width / grid_size;
  cell_h = (grid_bottom - grid_top) / grid_size;
  cellSelectorW = canvas_width / grid_size;
  selectorTop = grid_bottom + 20;

  generatePuzzle();
}

void draw() {
  background(255);
  draw_table();
  drawNumbers();
  drawNumberSelector();
  if (clicked_cell != null) {
    draw_circle_in_cell(clicked_cell[0], clicked_cell[1]);
  }
}

void draw_table() {
  strokeWeight(5);
  stroke(0);
  line(0, grid_top, width, grid_top);
  line(0, grid_bottom, width, grid_bottom);
  for (int i = 1; i < grid_size; i++) {
    int x = i * cell_w;
    int y = grid_top + i * cell_h;
    strokeWeight(i % 3 == 0 ? 3 : 1);
    line(x, grid_top, x, grid_bottom);
    line(0, y, width, y);
  }
}

void drawNumbers() {
  textSize(24);
  textAlign(CENTER, CENTER);
  fill(0);
  for (int r = 0; r < grid_size; r++) {
    for (int c = 0; c < grid_size; c++) {
      if (num[r][c] != 0) {
        int x = c * cell_w + cell_w/2;
        int y = grid_top + r * cell_h + cell_h/2;
        text(num[r][c], x, y);
      }
    }
  }
}

void drawNumberSelector() {
  for (int i = 0; i < grid_size; i++) {
    int x = i * cellSelectorW;
    int y = selectorTop;
    fill(selectedNumber != null && selectedNumber == i+1 ? 200 : 240);
    stroke(0);
    rect(x, y, cellSelectorW, selectorH);
    fill(0);
    textSize(24);
    textAlign(CENTER, CENTER);
    text(i+1, x + cellSelectorW/2, y + selectorH/2);
  }
}

void draw_circle_in_cell(int row, int col) {
  noStroke();
  fill(255,0,0,150);
  float x = col * cell_w + cell_w/2;
  float y = grid_top + row * cell_h + cell_h/2;
  ellipse(x, y, cell_w/2, cell_h/2);
}

boolean inBox(int mx, int my, int x, int y, int x2, int y2) {
  return mx > x && mx < x2 && my > y && my < y2;
}

void mousePressed() {
  // select grid cell
  for (int r = 0; r < grid_size; r++) {
    for (int c = 0; c < grid_size; c++) {
      int x1 = c * cell_w;
      int y1 = grid_top + r * cell_h;
      int x2 = x1 + cell_w;
      int y2 = y1 + cell_h;
      if (inBox(mouseX, mouseY, x1, y1, x2, y2)) {
        clicked_cell = new int[]{r, c};
        return;
      }
    }
  }
  // select number
  if (mouseY >= selectorTop && mouseY <= selectorTop + selectorH) {
    for (int i = 0; i < grid_size; i++) {
      int x = i * cellSelectorW;
      if (mouseX >= x && mouseX <= x + cellSelectorW) {
        selectedNumber = i+1;
        if (clicked_cell != null) {
          int r = clicked_cell[0], c = clicked_cell[1];
          num[r][c] = selectedNumber;
        }
        return;
      }
    }
  }
}

void generatePuzzle() {
  solution = generateSolution();

  // fill random numbers from solution
  for (int r = 0; r < grid_size; r++) {
    for (int c = 0; c < grid_size; c++) {
      if (random(1) > 0.5) {
        num[r][c] = solution[r][c];
      } else {
        num[r][c] = 0;
      }
    }
  }
}

int[][] generateSolution() {
  int[][] b = new int[grid_size][grid_size];
  solveBoard(b);
  return b;
}

boolean solveBoard(int[][] b) {
  for (int r = 0; r < grid_size; r++) {
    for (int c = 0; c < grid_size; c++) {
      if (b[r][c] == 0) {
        int[] pool = shuffleNumbers();
        for (int numTry : pool) {
          if (isValid(b, r, c, numTry)) {
            b[r][c] = numTry;
            if (solveBoard(b)) return true;
            b[r][c] = 0;
          }
        }
        return false;
      }
    }
  }
  return true;
}

boolean isValid(int[][] b, int row, int col, int numTry) {
  for (int i = 0; i < grid_size; i++) {
    if (b[row][i] == numTry || b[i][col] == numTry) return false;
  }
  int sr = (row/3)*3, sc = (col/3)*3;
  for (int r = sr; r < sr+3; r++)
    for (int c = sc; c < sc+3; c++)
      if (b[r][c] == numTry) return false;
  return true;
}

int[] shuffleNumbers() {
  int[] a = new int[9];
  for (int i = 0; i < 9; i++) a[i] = i+1;
  for (int i = 8; i > 0; i--) {
    int j = int(random(i+1));
    int t = a[i]; a[i] = a[j]; a[j] = t;
  }
  return a;
}
