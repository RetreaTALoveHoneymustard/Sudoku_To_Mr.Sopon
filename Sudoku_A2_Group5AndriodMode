int canvas_width = 1250;
int canvas_height = 900;
int grid_size = 9;
int grid_top = 20;
int grid_bottom = 880;
float cell_w = canvas_width / (float)grid_size;
float cell_h = (grid_bottom - grid_top) / (float)grid_size;
int[][] num = new int[grid_size][grid_size];
int[][][] position_num = new int[grid_size][grid_size][4];
int[] clicked_cell = null;

void setup() {
  size(canvas_width, canvas_height);
  initializeGrid();
}

void draw() {
  draw_grid();
}

void initializeGrid() {
  for (int row = 0; row < grid_size; row++) {
    for (int col = 0; col < grid_size; col++) {
      int x = (int)(col * cell_w);
      int y = (int)(grid_top + row * cell_h);
      int x2 = (int)(x + cell_w);
      int y2 = (int)(y + cell_h);
      position_num[row][col][0] = x;
      position_num[row][col][1] = y;
      position_num[row][col][2] = x2;
      position_num[row][col][3] = y2;
      num[row][col] = 0;
    }
  }
}

void draw_grid() {
  background(255);
  draw_table();
  draw_subtable();
  if (clicked_cell != null) {
    draw_circle_in_cell(clicked_cell[0], clicked_cell[1]);
  }
}

void draw_table() {
  strokeWeight(5);
  line(0, grid_top, width, grid_top);
  line(0, grid_bottom, width, grid_bottom);

  for (int i = 1; i < grid_size; i++) {
    if (i % 3 == 0) {
      float x = i * cell_w;
      line(x, grid_top, x, grid_bottom);
    }
  }

  for (int j = 1; j < grid_size; j++) {
    if (j % 3 == 0) {
      float y = grid_top + j * cell_h;
      line(0, y, width, y);
    }
  }
}

void draw_subtable() {
  strokeWeight(1);
  for (int i = 1; i < grid_size; i++) {
    if (i % 3 != 0) {
      float x = i * cell_w;
      line(x, grid_top, x, grid_bottom);
    }
  }

  for (int j = 1; j < grid_size; j++) {
    if (j % 3 != 0) {
      float y = grid_top + j * cell_h;
      line(0, y, width, y);
    }
  }
}

void draw_circle_in_cell(int row, int col) {
  float x = col * cell_w + cell_w / 2;
  float y = grid_top + row * cell_h + cell_h / 2;
  fill(255, 0, 0);
  ellipse(x, y, 20, 20);
}

boolean calculate_box(int Xuser, int Yuser, int x, int y, int x2, int y2) {
  return (Xuser > x && Xuser < x2 && Yuser > y && Yuser < y2);
}

void mousePressed() {
  for (int row = 0; row < grid_size; row++) {
    for (int col = 0; col < grid_size; col++) {
      int x = position_num[row][col][0];
      int y = position_num[row][col][1];
      int x2 = position_num[row][col][2];
      int y2 = position_num[row][col][3];
      if (calculate_box(mouseX, mouseY, x, y, x2, y2)) {
        clicked_cell = new int[]{row, col};
      }
    }
  }
}

void keyPressed() {
  if (clicked_cell != null) {
    int row = clicked_cell[0];
    int col = clicked_cell[1];
    if (key >= '0' && key <= '9') {
      num[row][col] = key - '0';
    }
  }
}
